worker_processes  auto;
pid /run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    server_tokens off;
    include       mime.types;

    map $request_uri $request_path { 
       ~(?<captured_path>[^?]*) $captured_path;
    }

    fastcgi_cache_path /etc/nginx/cache levels=1:2 keys_zone=cache_zone:10m inactive=60m max_size=100m;
    fastcgi_cache_key "$scheme$request_method$host$request_path";
    add_header X-Cache $upstream_cache_status;

    fastcgi_cache  cache_zone;
    fastcgi_cache_valid 200 301 302 30s;
    fastcgi_cache_use_stale updating error timeout invalid_header http_500;

    fastcgi_pass_header Set-Cookie;
    fastcgi_pass_header Cookie;
    fastcgi_ignore_headers Cache-Control Expires Set-Cookie;

    client_body_buffer_size 10K;
    client_header_buffer_size 1k;
    client_max_body_size 8m;
    large_client_header_buffers 2 1k;

    client_body_timeout 12;
    client_header_timeout 12;
    keepalive_timeout 15;
    send_timeout 10;

    error_log /dev/stderr;

    #access_log off;
    access_log /dev/stdout;

    gzip             on;
    gzip_comp_level  2;
    gzip_min_length  1000;
    # gzip_proxied     expired no-cache no-store private auth;
    gzip_types       application/json;

    # send headers in one peace, its better then sending them one by one
    tcp_nopush on;

    # don't buffer data sent, good for small data bursts in real time
    tcp_nodelay on;

    server {
        listen [::]:80 default_server;
        listen 80 default_server;
        server_name _;

        sendfile off;
        #access_log off;

        root /var/www/html/web;

        location / {
            #access_log off;
            sendfile off;
            return 404;
        }

        # only allowing POST requests for the 2 endpoints in use
        #
        location ~* /(login|authenticate|hello)$ {
            #access_log off;
            add_header X-Cache $upstream_cache_status;
            add_header X-Frame-Options DENY;
            add_header X-Content-Type-Options nosniff;
            add_header Allow "POST" always;
            if ( $request_method !~ ^(POST)$ ) {
                return 405;
            }
            try_files $uri $uri/ /index.php?q=$uri&$args;
        }

        # redirect bad request to the static page /404.html
        #
        error_page 400 /400.html;
        location  /400.html {
            #access_log off;
            root /var/lib/nginx/html;
            internal;
        }

        # redirect access denied to the static page /403.html
        #
        error_page 403 /403.html;
        location  /403.html {
            #access_log off;
            root /var/lib/nginx/html;
            internal;
        }

        # redirect page not found to the static page /404.html
        #
        error_page 404 /404.html;
        location  /404.html {
            #access_log off;
            root /var/lib/nginx/html;
            internal;
        }

        # redirect method not allowed to the static page /405.html
        #
        error_page 405 /405.html;
        location  /405.html {
            #access_log off;
            root /var/lib/nginx/html;
            internal;
        }

        # redirect too many reaquest to the static page /429.html
        #
        error_page 429 /429.html;
        location  /429.html {
            #access_log off;
            root /var/lib/nginx/html;
            internal;
        }

        # redirect server error to the static page /500.html
        #
        error_page 500 502 503 504 /500.html;
        location  /500.html {
            #access_log off;
            root /var/lib/nginx/html;
            internal;
        }

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        location ~ \.php$ {
            #access_log off;
            add_header X-Frame-Options DENY;
            add_header X-Content-Type-Options nosniff;
            add_header X-Cache $upstream_cache_status;

            internal;
            try_files $uri =404;
            fastcgi_split_path_info ^(.+\.php)(/.+)$;

            fastcgi_cache cache_zone;
            fastcgi_cache_valid 200 10m;

            fastcgi_pass  localhost:9000;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            fastcgi_param SCRIPT_NAME $fastcgi_script_name;
            fastcgi_index index.php;
            include fastcgi_params;
        }

        # deny access to . files, for security
        #
        location ~ /\. {
            #access_log off;
            log_not_found off;
            deny all;
        }
    }
    #include conf.d/*.conf;
}
